import pandas as pd
recipes = pd.read_csv('recipes_sample.csv')
reviews = pd.read_csv('reviews_sample.csv')
import xlwt
import openpyxl
from openpyxl import Workbook
#5.2 При помощи объединения таблиц и группировок, создайте DataFrame, состоящий из трех столбцов:
# recipe_id, name, review_count, где столбец review_count содержит кол-во отзывов,
# оставленных на рецепт recipe_id. У рецептов, на которые не оставлен ни один отзыв,
# в столбце review_count должен быть указан 0. Подтвердите правильность работы вашего кода,
# выбрав рецепт, не имеющий отзывов, и найдя строку,
# соответствующую этому рецепту, в полученном DataFrame.
newdf = recipes.copy()
b = newdf.rename(dict(contributor_id = 'user_id'), axis = 1)
b = pd.merge(left = reviews, right = b, on = 'user_id')
b['review_count'] = b.groupby('review')['review'].transform('size')
b = b.drop(columns = ['date','submitted','n_steps','description','n_ingredients','review','minutes','user_id', 'rating', 'id'])
b = b.loc[:, ~b.columns.str.contains('^Unnamed')]
print(b.sample(10).to_string())
wb = Workbook()
ws = wb.active

with pd.ExcelWriter('recipes with ratings.xlsx', engine = 'openpyxl') as writer:
    writer.book = wb
    #writer.sheets = dict((ws.title, ws) for ws in wb.worksheets)
    b.sample(100).to_excel(writer, sheet_name = 'number of ratings')
    writer.save()


#5.3. Выясните, рецепты, добавленные в каком году, имеют наименьший средний рейтинг?
from datetime import datetime
#k = datetime(2010, 1, 1)
#k1 = recipes.loc[recipes['submitted'] <k]
#print(k1)

newdf = recipes.copy()
a = newdf.rename(dict(contributor_id = 'user_id'), axis = 1)
a = pd.merge(left = reviews, right = a, on = 'user_id')
del a['recipe_id']
del a['n_steps']
del a['description']
del a['n_ingredients']
del a['review']
del a['minutes']
del a['name']
a = a.loc[:, ~a.columns.str.contains('^Unnamed')]
a['submitted'] = a['submitted'].astype("datetime64[ns]")
a = a.groupby(a.submitted.dt.year)['rating'].mean()
b = pd.DataFrame(a)
print(b[b.rating == b.rating.min()])

#6.1 Отсортируйте таблицу в порядке убывания величины столбца name_word_count и сохраните результаты выполнения заданий 3.1-3.3 в csv файл.
recipes = recipes.assign(name_word_count = recipes['name'].str.split().str.len())
sorted = recipes.sort_values(by = ['name_word_count'], ascending = True)
print(sorted.to_string())

#6.2 Воспользовавшись pd.ExcelWriter, cохраните результаты 5.1 и 5.2 в файл: на лист с названием
# Рецепты с оценками сохраните результаты выполнения 5.1; на лист с названием
# Количество отзывов по рецептам сохраните результаты выполнения 5.2.
